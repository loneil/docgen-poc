openapi: 3.0.0
info:
  version: 1.0.0
  title: Common Document Generation Service API
  description: DGRSC - Title here TBD
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
  contact:
    name: NR Common Service Showcase
    email: NR.CommonServiceShowcase@gov.bc.ca
servers:
  - url: /api/v1
    description: This Server
security:
  - OpenID: []
paths:
  /checks/status:
    get:
      summary: Returns status of correspondent APIs
      operationId: getChecksStatus
      tags:
        - Checks
      responses:
        '200':
          description: Responds if the correspondent API endpoint(s) are healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndpointList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /email:
    post:
      summary: Email sending
      operationId: postEmail
      tags:
        - Email
      security:
        - OpenID:
            - EMAILER
      parameters:
        - in: query
          name: devMode
          description: Send output to Ethereal for testing if true
          schema:
            type: boolean
      requestBody:
        description: Fields required to perform a mail merge and send
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailRequest'
      responses:
        '201':
          description: Responds with the correspondence id(s)? of the message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /email/merge:
    post:
      summary: Template mail merge & email sending
      operationId: postEmailMerge
      tags:
        - Email
      security:
        - OpenID:
            - EMAILER
      parameters:
        - in: query
          name: devMode
          description: Send output to Ethereal for testing if true
          schema:
            type: boolean
      requestBody:
        description: Fields required to perform a mail merge and send
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailMergeRequest'
      responses:
        '201':
          description: Responds with the correspondence id(s)? of the message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /email/merge/preview:
    post:
      summary: Template mail merge validation & preview
      operationId: postEmailMergeValidate
      tags:
        - Email
      security:
        - OpenID:
            - EMAILER
      requestBody:
        description: Fields required to perform a mail merge and send
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailMergeRequest'
      responses:
        '200':
          description: Responds with the result of the validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    OpenID:
      type: openIdConnect
      openIdConnectUrl: >-
        https://sso.pathfinder.gov.bc.ca/auth/realms/jbd6rnxw/.well-known/openid-configuration
  schemas:
    Attachment:
      type: object
      properties:
        content:
          type: string
          description: 'String, Buffer or a Stream contents for the attachment'
          example: PGI+SGVsbG8gV29ybGRcITwvYj4=
        contentType:
          type: string
          description: >-
            Optional content type for the attachment, if not set will be derived
            from the filename property
        encoding:
          type: string
          description: >-
            If set and content is string, then encodes the content to a Buffer
            using the specified encoding. Example values: 'base64', 'hex',
            'binary' etc. Useful if you want to use binary attachments in a JSON
            formatted email object.
          enum:
            - base64
            - binary
            - hex
          example: base64
        filename:
          type: string
          description: >-
            Filename to be reported as the name of the attached file. Use of
            unicode is allowed.
          example: testfile.txt
    ContextEntry:
      type: object
      required:
        - context
        - to
      properties:
        to:
          type: array
          items:
            type: string
          description: >-
            An array of recipients email addresses that will appear on the To:
            field
          example:
            - baz@gov.bc.ca
        context:
          type: object
          description: A freeform JSON object of key-value pairs
          example:
            something:
              greeting: Hello
              target: World
            someone: user
    EmailRequest:
      type: object
      required:
        - bodyType
        - body
        - from
        - to
        - subject
      properties:
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
          description: A list of recipient emails
        bcc:
          type: array
          items:
            type: string
          description: >-
            An array of recipients email addresses that will appear on the BCC:
            field
          example:
            - foo@gov.bc.ca
        bodyType:
          type: string
          description: 'The email body type (html = content with html, text = plaintext)'
          enum:
            - html
            - text
          example: html
        body:
          type: string
          description: >-
            The body of the message as an Unicode string, Buffer, Stream or an
            attachment-like object
          example: Hello World content
        cc:
          type: array
          items:
            type: string
          description: >-
            An array of recipients email addresses that will appear on the CC:
            field
          example:
            - bar@gov.bc.ca
        encoding:
          type: string
          description: >-
            Identifies encoding for text/html strings (defaults to 'utf-8',
            other values are 'hex' and 'base64')
          enum:
            - base64
            - binary
            - hex
            - utf-8
          example: utf-8
        from:
          type: string
          description: >-
            The email address of the sender. All email addresses can be plain
            'sender@server.com' or formatted '"Sender Name" sender@server.com'
          example: example@gov.bc.ca
        priority:
          type: string
          description: >-
            Sets message importance headers, either 'high', 'normal' (default)
            or 'low'.
          enum:
            - normal
            - low
            - high
          example: normal
        to:
          type: array
          items:
            type: string
          description: >-
            An array of recipients email addresses that will appear on the To:
            field
          example:
            - baz@gov.bc.ca
        subject:
          type: string
          description: The email subject
          example: Hello user
    EmailMergeRequest:
      type: object
      required:
        - bodyType
        - body
        - contexts
        - from
        - subject
      properties:
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
        bodyType:
          type: string
          description: 'The email body type (html = content with html, text = plaintext)'
          enum:
            - html
            - text
          example: html
        body:
          type: string
          description: >-
            A Nunjucks compatible body template of the message as an Unicode
            string, Buffer, Stream or an attachment-like object. Refer to
            https://mozilla.github.io/nunjucks/templating.html for template
            syntax.
          example: '{{ something.greeting }} {{ something.target }} content'
        contexts:
          type: array
          description: An array of context objects
          items:
            $ref: '#/components/schemas/ContextEntry'
        encoding:
          type: string
          description: >-
            Identifies encoding for text/html strings (defaults to 'utf-8',
            other values are 'hex' and 'base64')
          enum:
            - base64
            - binary
            - hex
            - utf-8
          example: utf-8
        from:
          type: string
          description: >-
            The email address of the sender. All email addresses can be plain
            'sender@server.com' or formatted '"Sender Name" sender@server.com'
          example: example@gov.bc.ca
        priority:
          type: string
          description: >-
            Sets message importance headers, either 'high', 'normal' (default)
            or 'low'.
          enum:
            - normal
            - low
            - high
          example: normal
        subject:
          type: string
          description: The email subject
          example: 'Hello {{ someone }}'
    EndpointStatus:
      type: object
      required:
        - name
        - endpoint
        - healthCheck
        - authenticated
        - authorized
      properties:
        name:
          type: string
          description: The name of the endpoint
          example: WebADE API
        endpoint:
          type: string
          description: Base endpoint URL
          example: 'https://example.com/v1/'
        healthCheck:
          type: boolean
          description: Is the endpoint reachable
        authenticated:
          type: boolean
          description: Are credentials valid to access endpoint
        authorized:
          type: boolean
          description: Do the credentials have the right permissions
    EndpointList:
      type: object
      required:
        - endpoints
      properties:
        endpoints:
          type: array
          items:
            $ref: '#/components/schemas/EndpointStatus'
          description: A list of Endpoint Statuses
    Error:
      required:
        - error
      properties:
        error:
          type: string
          description: contains a message about the failure
          example: Something errored
    Success:
      required:
        - message
      properties:
        message:
          type: string
          description: 'Contains message about the success, normally "Written successfully"'
          example: Written successfully
  responses:
    BadRequest:
      description: Request is missing content or is malformed
    Forbidden:
      description: Lack required role to perform action
    NotFound:
      description: Not found
    UnauthorizedError:
      description: Access token is missing or invalid
